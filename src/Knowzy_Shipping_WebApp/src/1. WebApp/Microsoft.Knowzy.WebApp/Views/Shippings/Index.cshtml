@section HeadExtension{
    <link rel="manifest" href="manifest.json" />
    <script>
        //This is the service worker with the combined offline experience (Offline page + Offline copy of pages)
        if (navigator.serviceWorker) {
            //Add this below content to your HTML page, or add the js file to your page at the very top to register service worker
            if (navigator.serviceWorker.controller) {
                console.log('[PWA Builder] active service worker found, no need to register')
            } else {

                //Register the ServiceWorker
                navigator.serviceWorker.register('pwabuilder-sw.js', {
                    scope: './'
                }).then(function (reg) {
                    console.log('Service worker has been registered for scope:' + reg.scope);
                });
            }
        }
    </script>
}

@*// ******************************************************************
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THE CODE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
// THE CODE OR THE USE OR OTHER DEALINGS IN THE CODE.
// *******************************************************************@

@model IEnumerable<Microsoft.Knowzy.Models.ViewModels.ShippingsViewModel>


<div class="toolbar hidden-xs">
    <span class="section-title">@ViewData["Title"] Information</span>
    <button type="button" onclick="location.href = '@(Url.Action("Create", "Shippings"))'" class="btn btn-default button-default button-header">
        <span class="icon-add button-icon"></span><span>Add new order</span>
    </button>
</div>

<div class="row"> 
    <table class="table table-striped table-responsive main-grid">
        <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CompanyName)
            </th>
            <th class="hidden-xs">
                @Html.DisplayNameFor(model => model.Tracking)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model) {
            <tr onclick="location.href = '@(Url.Action("Details", "Shippings", new { orderId = item.Id }))'">
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CompanyName)
                </td>
                <td class="hidden-xs">
                    @Html.DisplayFor(modelItem => item.Tracking)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
            </tr>
        }
        </tbody>
    </table>  
</div>

<script>
    if (window.Windows && Windows.UI.Notifications) {
        /*execute code that calls WIndows APIs */

        var tileContent = new Windows.Data.Xml.Dom.XmlDocument();

        var tile = tileContent.createElement("tile");
        tileContent.appendChild(tile);

        var visual = tileContent.createElement("visual");
        tile.appendChild(visual);

        var bindingMedium = tileContent.createElement("binding");
        bindingMedium.setAttribute("template", "TileMedium");
        visual.appendChild(bindingMedium);

        var peekImage = tileContent.createElement("image");
        peekImage.setAttribute("placement", "peek");
        peekImage.setAttribute("src", "https://unsplash.it/150/150/?random");
        peekImage.setAttribute("alt", "Welcome to Knowsie!");
        bindingMedium.appendChild(peekImage);

        var text = tileContent.createElement("text");
        text.setAttribute("hint-wrap", "true");
        text.innerText = "Demo Message";
        bindingMedium.appendChild(text);

        //fire the notification

        var notifications = Windows.UI.Notifications;
        var tileNotification = new notifications.TileNotification(tileContent);
        notifications.TileUpdateManager.createTileUpdaterForApplication().update(tileNotification);
    }
</script>